import ID3
import parse
import unit_tests

# unit_tests.testID3AndEvaluate()
# unit_tests.testPruning()
# unit_tests.testID3AndTest()
# unit_tests.testPruningOnHouseData('house_votes_84.data')

train_data = parse.parse('./cars_train.data')
val_data = parse.parse('./cars_valid.data')
test_data = parse.parse('./cars_test.data')

candy_data = parse.parse('./candy.data')
house_data = parse.parse('./house_votes_84.data')
tennis_data = parse.parse('./tennis.data')

# tree = ID3.ID3(train_data, 'good')

# train_accuracy = ID3.test(tree, train_data)
# valid_accuracy = ID3.test(tree, val_data)

# #tree.show()
# test_noprune = ID3.test(tree, test_data)

# ID3.prune(tree, val_data)
# #tree.show()
# test_prune = ID3.test(tree, test_data)
# train_prune = ID3.test(tree, train_data)
# valid_prune = ID3.test(tree, val_data)

# print("Accuracy on trainning set before pruning: ", train_accuracy)
# print("Accuracy on trainning set after pruning: ", train_prune)
# print("\nAccuracy on validation set before pruning: ", valid_accuracy)
# print("Accuracy on validation set after pruning: ", valid_prune)
# print("\nTest accuracy before pruning: ", test_noprune)
# print("Test accuracy after pruning: ", test_prune)

'''
Q6 test code
'''
print("\n\n=====Q6=====\n\n")
candy_train = candy_data[:2*len(candy_data)//3]
candy_test = candy_data[len(candy_data)//3:]

#test on single tree with prunning
tree_Q6 = ID3.ID3(candy_train, 0)
print("Accuracy on candy.data with single tree with no prunning: ", ID3.test(tree_Q6, candy_test))

forest = ID3.construct_random_forest(candy_train, 0)
print("Accuracy on candy.data with random forest: ", ID3.test_random_forest(forest, candy_test))